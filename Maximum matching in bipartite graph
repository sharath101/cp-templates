//https://ali-ibrahim137.github.io/competitive/programming/2020/01/02/maximum-independent-set-in-bipartite-graphs.html

#pragma GCC optimize ("-O2")
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define pb push_back
#define mp make_pair
#define deb(x) cout<< #x << " " << x << "\n";
#define MAX 9223372036854775807
#define MIN -9223372036854775807
#define PI 3.141592653589
#define setbits(n) __builtin_popcountll(n)
#define mkunique(a) a.resize(unique(a.begin(),a.end())-a.begin());
const ll mod=1e9+7;
 
const int N=1e5+10;
vector<ll> a[N];
int match[N];
bool vis[N];

bool dfs(int node){
    if(vis[node])return 0;
    vis[node] = 1;
    for(auto nx:a[node]){
        if(match[nx]==-1 || dfs(match[nx])){
            match[node] = nx;
            match[nx] = node;
            return 1;
        }
    }
    return 0;
}
 
int main(){
    
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    ll T=clock();
 
    ll n,m;
    cin>>n>>m;
    for(ll i=0;i<m;i++){
        ll u,v;
        cin>>u>>v;u--,v--;
        a[u].pb(v);
        a[v].pb(u);
    }


    memset(match, -1, sizeof match);
    while(1){
        memset(vis, false, sizeof vis);
        bool cont = 0;
        for(int i=0;i<n;i++){
            if(match[i]==-1)
                cont|=dfs(i);
        }
        if(cont==0)break;
    }
    int MCBM = 0;
    for(int i=0;i<n;i++){
        if(match[i]!=-1)
            MCBM++;
    }
    ll num_edges=MCBM/2;
    
 
    cerr<<"\n\nTIME: "<<(double)(clock()-T)/CLOCKS_PER_SEC<<" sec\n";
    T = clock();
    return 0;
}
